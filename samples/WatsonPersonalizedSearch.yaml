version: 6
meta:
  description: >
    Demo agent based on [Walmart Open API](https://developer.walmartlabs.com)


    You can try questions like:

    - show organization "CityCool"

    - use [instanceName](wps:InstanceName)    -- not yet

    - [search](:ActionShow) [for](wps:SearchDocs)
    [searchquery](wps:SearchQuery)  -- yes

    - show [instances](wps:Instances) for[organization](wps:Organization) id  --
    yes

    - [show me](wps:SearchDocs) [searchquery](wps:SearchQuery)  -- nope

    - show [organization](wps:Organization) for  id   -- yes

    - show instances for this organization    -- yes
  name: Watson Personalized Search Agent
  icon: >-
    http://images5.fanpop.com/image/polls/868000/868791_1320146639104_full.jpg?v=1320146712
  protected: true
secrets:
  - name: instancesearchkey
    notes: Dillards_WSI_Instance in production
  - name: wpskey
    notes: ''
  - name: apiKey
    notes: 'Get your API key at https://developer.walmartlabs.com/'
concepts:
  - name: 'soda:DatasetSearchResultId'
  - name: 'soda:DatasetSearchResultName'
  - name: 'soda:Dataset'
  - name: 'soda:DatasetName'
  - name: 'soda:DatasetId'
  - name: 'soda:Information'
  - name: 'soda:DatasetSearchResult'
    ontology:
      isSpellAs: dataset result
      subClassOf: ':Showable'
    attributes:
      'soda:DatasetSearchResultName': resource.name
      'soda:DatasetSearchResultId': resource.id
  - name: 'soda:SearchQuery'
  - name: 'soda:DatasetSearchResults'
    ontology:
      isSpellAs: dataset results
      subClassOf: ':Showable'
      isListOf: 'soda:DatasetSearchResult'
  - name: ':ZIPCode'
  - name: ':Weather'
  - name: ':Joke'
  - name: ':UseInstance'
    ontology:
      subClassOf: ':ActionShow'
  - name: ':Use'
  - name: 'wps:InstanceName'
    ontology:
      subClassOf: ':UserString'
  - name: 'wps:Results'
    ontology:
      subClassOf: ':Showable'
  - name: ':ActionShow'
  - name: ':Direct'
  - name: ':Attribute'
  - name: 'wps:OrganizationId'
    ontology:
      subClassOf: ':GUID'
  - name: 'wps:OrganizationName'
    ontology:
      subClassOf: ':UserString'
  - name: 'wps:Instances'
    ontology:
      subClassOf:
        - ':Showable'
        - ':Attribute'
      isSpellAs: instances
  - name: 'wps:Instance'
    ontology:
      subClassOf: ':Showable'
      isSpellAs: instance
  - name: ':UserQuery'
  - name: ':Relation'
  - name: 'wps:SearchQuery'
  - name: 'wps:SearchDocs'
    ontology:
      subClassOf: ':Showable'
  - name: 'wps:Organization'
    ontology:
      subClassOf: ':Showable'
      isSpellAs: organization
  - name: ':GUID'
  - name: ':UserString'
  - name: ':Showable'
patterns: "<!--\n\tEnter your NL patterns in this markdown panel. \n\tA pattern consists of natural language text annotated with concepts tags. \n\tFor example,\n\t 'tell me a [joke](:Joke)' annotates the :Joke concept appropriately\n\t 'show me the [weather](:Weather)' annotates the :Weather concept appropriately. \n\tWe even support regular expression annotations.\n\t For example, '[`REGEX [0-9]{5}`](:ZIPCode)' provides a zip code annotation.\n\t \n\t - find [datasets](soda:Datasets) for [searchquery](soda:SearchQuery)\n\n-->\n- get [dataset](soda:Dataset) for [datasetname](soda:DatasetSearchResultName)\n- show [information](soda:Information) for [datasetquery](soda:SearchQuery)\n- show [datasets](soda:DatasetSearchResults) for [datasetquery](soda:SearchQuery)\n- show [organization](wps:Organization)  [named](wps:OrganizationName)\n- use [instanceName](wps:InstanceName)\n- [search](:ActionShow) [for](wps:SearchDocs) [searchquery](wps:SearchQuery)\n- show [instances](wps:Instances) for [organization](wps:Organization) id\n- [show me](wps:SearchDocs) [searchquery](wps:SearchQuery)\n- show [organization](wps:Organization) for  id"
actions:
  - name: 'soda:FetchDataset'
    signature: >-
      soda:Dataset (context soda:DatasetSearchResult (data
      soda:DatasetSearchResultName)) -> data soda:Dataset
    kind: 'nodejs:8'
    code: |-
      const request = require('request-promise-native')
      const eba = require('eba')

      module.exports.main = function (params) {
        let h = new eba.Params(params)
        let searchQuery = h.get(":UserString")
        let tuning = encodeURIComponent("30<60%")
        let options = {
          uri: `http://api.us.socrata.com/api/catalog/v1?min_should_match=${tuning}&q=${searchQuery}&limit=5`,
          headers: {
              'User-Agent': 'Request-Promise',
              'Accept' : 'application/json',
          },
          json: true // Automatically parses the JSON string in the response
        };

        return request(options)
          .then((result) => {
           // return {error: `Debugging result ${JSON.stringify(result,null,2)}`}
            // return {error: `Debugging result ${result.data.organizationByName}`}
            if ( result.results.length > 0 ) {
              return new eba.Result().setData('soda:Dataset',result.results)
            } else {
              return {error: `No fetch datasets found for  ${searchQuery}`}
            }
          })
          .catch((error) => {
            return { error: `SODA:FetchDataset API error: ${error}` }
          })
          
      }
    notes: in progress
  - name: 'soda:SearchForDatasets'
    signature: >-
      soda:DatasetSearchResults (context data :UserString) -> data
      soda:DatasetSearchResults
    kind: 'nodejs:8'
    code: |-
      const request = require('request-promise-native')
      const eba = require('eba')

      module.exports.main = function (params) {
        let h = new eba.Params(params)
        let searchQuery = h.get(":UserString")
        let tuning = encodeURIComponent("30<60%")
        let options = {
          uri: `http://api.us.socrata.com/api/catalog/v1?min_should_match=${tuning}&q=${searchQuery}&limit=5`,
          headers: {
              'User-Agent': 'Request-Promise',
              'Accept' : 'application/json',
          },
          json: true // Automatically parses the JSON string in the response
        };

        return request(options)
          .then((result) => {
           // return {error: `Debugging result ${JSON.stringify(result,null,2)}`}
            // return {error: `Debugging result ${result.data.organizationByName}`}
            if ( result.results.length > 0 ) {
              return new eba.Result().setData('soda:DatasetSearchResults',result.results)
            } else {
              return {error: `No datasets found for  ${searchQuery}`}
            }
          })
          .catch((error) => {
            return { error: `SODA:SearchForDatasets API error: ${error}` }
          })
          
      }
    notes: works
  - name: 'wps:OrganizationByName'
    signature: 'wps:Organization (context data :UserString) -> data wps:Organization'
    kind: 'nodejs:8'
    code: |-
      const request = require('request-promise-native')
      const eba = require('eba')

      module.exports.main = function (params) {
        let h = new eba.Params(params)
        let orgname = h.get(":UserString")
        let options = {
          uri: `https://searchinsights.ibmmarketingcloud.com/graphql`,
         
          headers: {
              'User-Agent': 'Request-Promise',
              'Accept' : 'application/json',
              'Authorization':`Basic ${params.secrets.wpskey}`,
              'Method':'POST'
          },
          body : {"query":`{ organizationByName (name: \"${orgname}\") {  organizationName   instances { instanceName  }  }}`},
          json: true // Automatically parses the JSON string in the response
        };

        return request.post(options)
          .then((result) => {
           // return {error: `Debugging result ${JSON.stringify(result,null,2)}`}
            // return {error: `Debugging result ${result.data.organizationByName}`}
            if ( result.data.organizationByName ) {
              return new eba.Result().setData('wps:Organization',result.data.organizationByName)
            } else {
              return {error: `No organization found with name ${orgname}`}
            }
          })
          .catch((error) => {
            return { error: `WPS:OrganizationByName API error: ${error}` }
          })
          
      }
    notes: works with graphql
  - name: 'wps:InstanceByInstanceName'
    signature: 'wps:Instance (wps:InstanceName (data :UserString)) -> data wps:Instance'
    kind: 'nodejs:8'
    code: |-
      const request = require('request-promise-native')
      const eba = require('eba')


      module.exports.main = function (params) {
        let h = new eba.Params(params)
        let org = h.get("wps:Organization")

        let options = {
          uri: `https://searchinsights.ibmmarketingcloud.com/service/v1/organizations/${org.id}`,
         
          headers: {
              'User-Agent': 'Request-Promise',
              'Accept' : 'application/json',
              'Authorization':`Basic ${params.secrets.wpskey}`
          },
          json: true // Automatically parses the JSON string in the response
        };

        return request(options)
          .then((result) => {
            // return {error: `Debugging result ${JSON.stringify(result,null,2)}`}
            if (result.status == 200 && result.organizations.length > 0 && result.organizations[0].instances.length > 0) {
              return new eba.Result().setData('wps:Instance',result.organizations[0].instances)
            } else {
              return {error: `No instances found for org id ${orgid}`}
            }
          })
          .catch((error) => {
            return { error: `WPS:InstancesByOrgId API error: ${error}` }
          })
          
      }
    notes: broken
  - name: 'wps:InstancesForOrg'
    signature: 'wps:Instances (context data wps:Organization) -> data wps:Instances'
    kind: 'nodejs:8'
    code: |-
      const request = require('request-promise-native')
      const eba = require('eba')

      module.exports.main = function (params) {
        let h = new eba.Params(params)
        let org = h.get("wps:Organization")

        let options = {
          uri: `https://searchinsights.ibmmarketingcloud.com/service/v1/organizations/${org.id}`,
         
          headers: {
              'User-Agent': 'Request-Promise',
              'Accept' : 'application/json',
              'Authorization':`Basic ${params.secrets.wpskey}`
          },
          json: true // Automatically parses the JSON string in the response
        };

        return request(options)
          .then((result) => {
            // return {error: `Debugging result ${JSON.stringify(result,null,2)}`}
            if (result.status == 200 && result.organizations.length > 0 && result.organizations[0].instances.length > 0) {
              return new eba.Result().setData('wps:Instances',result.organizations[0].instances)
            } else {
              return {error: `No instances found for org id ${orgid}`}
            }
          })
          .catch((error) => {
            return { error: `WPS:InstancesByOrgId API error: ${error}` }
          })
          
      }
    notes: does not work
  - name: 'wps:InstancesByOrgId'
    signature: 'wps:Instances (data :GUID) -> data wps:Instances'
    kind: 'nodejs:8'
    code: |-
      const request = require('request-promise-native')
      const eba = require('eba')

      module.exports.main = function (params) {
        let h = new eba.Params(params)
        let orgid = h.get(":GUID")

        let options = {
          uri: `https://searchinsights.ibmmarketingcloud.com/service/v1/organizations/${orgid}`,
         
          headers: {
              'User-Agent': 'Request-Promise',
              'Accept' : 'application/json',
              'Authorization':`Basic ${params.secrets.wpskey}`
          },
          json: true // Automatically parses the JSON string in the response
        };

        return request(options)
          .then((result) => {
            // return {error: `Debugging result ${JSON.stringify(result,null,2)}`}
            if (result.status == 200 && result.organizations.length > 0 && result.organizations[0].instances.length > 0) {
              return new eba.Result().setData('wps:Instances',result.organizations[0].instances)
            } else {
              return {error: `No instances found for org id ${orgid}`}
            }
          })
          .catch((error) => {
            return { error: `WPS:InstancesByOrgId API error: ${error}` }
          })
          
      }
    notes: works
  - name: 'wps:Search'
    signature: >-
      wps:SearchDocs (optional wps:SearchQuery (data :UserString)) -> data
      wps:SearchDocs
    kind: 'nodejs:8'
    code: |-
      const request = require('request-promise-native')
      const eba = require('eba')

      module.exports.main = function (params) {
        let h = new eba.Params(params)
        let searchquery = h.get(":UserString")

        let options = {
          uri: `https://searchinsights.ibmmarketingcloud.com/service/v1/search/select?q=${encodeURIComponent(searchquery)}`,
         
          headers: {
              'User-Agent': 'Request-Promise',
              'Accept' : 'application/json',
              'ESSAuthorization':`Basic NTIzMDFhY2QtYWM1ZC00NTM5LWI1NWQtYTAxNGYzNjA3MWE1`
          },
          json: true // Automatically parses the JSON string in the response
        };


        return request(options)
          .then((result) => {
            if (result.numFound >0 && result.searchResults.length>0) {
              return new eba.Result().setData('wps:SearchDocs',result.searchResults)
            } else {
              return {error: `No search docs found ${result.numFound} ${result.searchResults.length}`}
            }
          })
          .catch((error) => {
            return { error: `WPS:Search API error search: ${error}` }
          })
          
      }
    notes: works
  - name: 'wps:OrganizationById'
    signature: 'wps:Organization (data :GUID) -> data wps:Organization'
    kind: 'nodejs:8'
    code: |-
      const request = require('request-promise-native')
      const eba = require('eba')

      module.exports.main = function (params) {
        let h = new eba.Params(params)
        let orgid = h.get(":GUID")

        let options = {
          uri: `https://searchinsights.ibmmarketingcloud.com/service/v1/organizations/${orgid}`,
         
          headers: {
              'User-Agent': 'Request-Promise',
              'Accept' : 'application/json',
              'Authorization':`Basic ${params.secrets.wpskey}`
          },
          json: true // Automatically parses the JSON string in the response
        };

        return request(options)
          .then((result) => {
            if (result.status == 200 && result.organizations.length>0) {
              return new eba.Result().setData('wps:Organization',result.organizations[0])
            } else {
              return {error: "No organization found for id ${orgid}"}
            }
          })
          .catch((error) => {
            return { error: `WPS:OrganizationById API error: ${error}` }
          })
          
      }
    notes: works
rules:
  - name: ''
    signature: 'soda:Information -> soda:DatasetSearchResults'
    notes: ''
endpoints:
  - name: '@render'
    kind: 'nodejs:8'
    code: |-
      function renderProduct(item) {
        return {
          text: item.name,
          thumb_url: item.mediumImage,
          fields: [
            {
              title: "Price",
              value: Number(item.salePrice).toLocaleString("en-US", { style: "currency", currency: "USD"}).replace(/\.00/,""),
              short: true
            }
          ]
        }
      }

      function render(channel, node, data) {
        let { text, name } = node.data.content

        if (channel == "slack") {
          if (name == "wmt:Products") {
            let attachments = data.map(renderProduct)
            return {
              text: text,
              attachments: attachments
            }
          }
          
          if (name == "wmt:Product") {
            return {
              text: text,
              attachments: [renderProduct(data)]
            }
          }
        }
      }

      module.exports.main = function({ input }) {
        let result = render(input.channel, input.node, input.data)
        if (result) {
          return { output: result }
        } else {
          return {}
        }
      }
    notes: ''
statics:
  - name: soda/datasets.jsx
    mime: text/jsx
    text: |-
      soda_DatasetSearchResultsData = ({data}) => {
        return (
          <div className="wmt-products">
            { data.map((item) =>
              React.createElement(
                soda_DatasetSearchResultData,
                {data:item})) }
          </div>)
      }
      // the datasets seem to be located at <host>/resource/<datasetid>.json
      soda_DatasetSearchResultData = ({data}) => {
        const item = data
        return (
          <div key={item.docId} className="wmt-product">
            <div className="wmt-product-info">
           
              <div className="wmt-product-info-name">
                <p><strong>{item.resource.name}</strong></p>
                <p>{React.createElement(soda_link,{linky:item.permalink})}</p>
               
              </div>
            </div>
            <div className="wmt-product-info-description">
              <div dangerouslySetInnerHTML={{__html:soda_decodeHTMLEntities(item.resource.description
      )}}/>
            </div>
          </div>)
      }

      soda_link = ({linky}) => {
        const link = linky
        return (<a href={'"'+link+'"'} target='_blank'>{link}</a>)
      }

      soda_decodeHTMLEntities = (encoded) => {
        if (encoded) {
          var elem = document.createElement('textarea')
          elem.innerHTML = encoded.replace(/[\uFFFD]/g,' ')
          return elem.value
        }
        else return ""
      }
    notes: ''
    frontend: true
  - name: wps/instance.jsx
    mime: text/jsx
    text: |-
      wps_InstancesData = ({data}) => {
        return (
          <div className="wmt-products">
            { data.map((item) =>
              React.createElement(
                wps_InstanceData,
                {data:item})) }
          </div>)
      }

      wps_InstanceData = ({data}) => {
        const item = data
        return (
          <div key={item.id} className="wmt-product">
            <div className="wmt-product-info">
              
              <div className="wmt-product-info-name">
                <p><strong>{item.instanceName}</strong></p>
                <p><strong>{item.id}</strong></p>

              </div>
            </div>
            
          </div>)
      }
    notes: ''
    frontend: true
  - name: wps/organization.jsx
    mime: text/jsx
    text: |+
      wps_OrganizationData = ({data}) => {
        const item = data
        return (
          <div key={item.id} className="wmt-product">
            <div className="wmt-product-info">
              
              <div className="wmt-product-info-name">
                <p><strong>{item.organizationName}</strong></p>
                <p>It has the following instances</p>
                {item.instances.map(function(object, i){
              return <p>{object.instanceName}</p>;
          })}
              </div>
            </div>
            
          </div>)
      }

      wps_OrganizationContent = ({data}) => {
        const item = data
        return (
          <div key={item.id} className="wmt-product">
            <div className="wmt-product-info">
              
              <div className="wmt-product-info-name">
                <p><strong>{item.organizationName}</strong></p>
                
              </div>
            </div>
            
          </div>)
      }

    notes: ''
    frontend: true
  - name: wps/searchdocs.jsx
    mime: text/jsx
    text: |-
      wps_SearchDocsData = ({data}) => {
        return (
          <div className="wmt-products">
            { data.map((item) =>
              React.createElement(
                wmt_SearchDocData,
                {data:item})) }
          </div>)
      }

      wmt_SearchDocData = ({data}) => {
        const item = data
        return (
          <div key={item.docId} className="wmt-product">
            <div className="wmt-product-info">
              <a href={item.url} target="_blank" className="wmt-product-info-image">
                <img src={item.description.thumbnails[0]}/>
              </a>
              <div className="wmt-product-info-name">
                <p><strong>{item.description.display_name}</strong></p>
               
              </div>
            </div>
            <div className="wmt-product-info-description">
              <div dangerouslySetInnerHTML={{__html:wmt_decodeHTMLEntities(item.description.short_description
      )}}/>
            </div>
          </div>)
      }

      wmt_decodeHTMLEntities = (encoded) => {
        if (encoded) {
          var elem = document.createElement('textarea')
          elem.innerHTML = encoded.replace(/[\uFFFD]/g,' ')
          return elem.value
        }
        else return ""
      }
    notes: ''
    frontend: true
  - name: wmt/product.css
    mime: text/css
    text: |-
      .wmt-product {
        margin-bottom: 20px;
      }
      .wmt-product:last-child {
        margin-bottom: 0;
      }
      .wmt-product-info {
        display: flex;
        align-items: center;
        margin-bottom: 10px;
      }
      .wmt-product-info img {
        max-width: 100px;
        margin-right: 15px;
      }
      .wmt-product-discount {
        color: red;
      }
      .wmt-product-info-description {
        display: block;
        overflow: hidden;
        line-height: 16px;
        max-height: calc(16px * 5);
        text-overflow: ellipsis;
        display: -webkit-box;
        -webkit-box-orient: vertical;
        -webkit-line-clamp: 5;
      }
    frontend: true
    backend: false
