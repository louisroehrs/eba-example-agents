version: 6
meta:
  description: >+
    Demo agent based on [Walmart Open API](https://developer.walmartlabs.com)


    You can try questions like:

    - what's trending now?

    - show me popular products

    - show me top 5 of these products

    - show me price for the first of them

    - show me top 5 popular products sorted by price

    - what is average price for them?

    - what is description sentiment for the first product?

    - show me popular products with negative description

    - show me popular products with positive description

    - notify me if price of product "Maverix Monster Electric Skateboard" is
    less than $50

    - show me product with UPC 647627503349

    - what is product name for UPC 647627503349?

  name: Walmart Trends
secrets:
  - name: apiKey
    notes: 'Get your API key at https://developer.walmartlabs.com/'
concepts:
  - name: ':MinimumBy'
  - name: ':LowValue'
  - name: 'wmt:Cheap'
    ontology:
      isSpellAs: cheap
  - name: ':MaximumBy'
  - name: 'wmt:SalePrice'
    ontology:
      isSpellAs: sale price
      subClassOf:
        - ':NumAttribute'
        - ':Attribute'
  - name: ':HighValue'
  - name: 'wmt:Expensive'
    ontology:
      isSpellAs: expensive
  - name: ':Number'
  - name: ':UPC'
    ontology:
      isSpellAs: UPC
  - name: ':Name'
  - name: ':UserString'
  - name: ':WithName'
  - name: 'wmt:TrendingNow'
  - name: ':Showable'
  - name: ':NumAttribute'
  - name: 'wmt:MSRP'
    ontology:
      subClassOf:
        - ':NumAttribute'
        - ':Attribute'
      isSpellAs: msrp
  - name: ':Attribute'
  - name: 'wmt:Trending'
  - name: 'wmt:SalePriceValue'
  - name: ':StrAttribute'
  - name: ':What'
  - name: 'wmt:Description'
    ontology:
      subClassOf:
        - ':StrAttribute'
        - ':Attribute'
      isSpellAs: description
  - name: ':Timeframe'
  - name: 'wmt:Product'
    ontology:
      subClassOf: ':Showable'
      isSpellAs: product
    attributes:
      'wmt:SalePrice': salePrice
      ':Name': name
      'wmt:MSRP': msrp
      'wmt:Description': shortDescription
  - name: 'wmt:Products'
    ontology:
      subClassOf: ':Showable'
      isListOf: 'wmt:Product'
      isSpellAs: products|*
patterns: |-
  <!-- for core entities -->
  - show [trending](wmt:Trending) [products](wmt:Products)
  - show [popular](wmt:Trending) products
  - [what's](:What) [trending now](wmt:TrendingNow)


  <!-- for attributes -->
  - what is product name for [UPC](:UPC) 1234
  - show [price](wmt:SalePrice) for this product
  - show [msrp](wmt:MSRP) for this product
  - what is [description](wmt:Description) for this product?

  <!-- for data modifiers -->
  - show me [expensive|most expensive](wmt:Expensive) products
  - show me [cheap|inexpensive|least expensive](wmt:Cheap) products
actions:
  - name: 'wmt:SearchProductByUPC'
    signature: 'wmt:Product (optional :UPC (data :Number)) -> data wmt:Product'
    kind: 'nodejs:8'
    code: |-
      const request = require('request-promise-native')
      const eba = require('eba')

      module.exports.main = function (params) {
        let h = new eba.Params(params)
        let upc = h.get(":Number")

        return request
          .get(`http://api.walmartlabs.com/v1/items?apiKey=${params.secrets.apiKey}&upc=${encodeURIComponent(upc)}`)
          .then(JSON.parse)
          .then(({items}) => {
            let item = items[0]
            if (item) {
              if (!item.shortDescription)
                item.shortDescription = ""
              return new eba.Result().setData('wmt:Product', item)
            } else {
              return { error: "I haven't found any product" }
            }
          })
          .catch((error) => {
            return { error: `Walmart API error: ${error}` }
          })
      }
  - name: 'wmt:SearchProductsByName'
    signature: 'wmt:Products (optional :WithName (data :UserString)) -> data wmt:Products'
    kind: 'nodejs:8'
    code: |-
      const request = require('request-promise-native')
      const eba = require('eba')

      module.exports.main = function (params) {
        let h = new eba.Params(params)
        let nameString = h.get(":UserString")

        return request
          .get(`http://api.walmartlabs.com/v1/search?apiKey=${params.secrets.apiKey}&query=${encodeURIComponent(nameString)}`)
          .then(JSON.parse)
          .then(({items}) => {
            items.forEach((item) => {
              if (!item.shortDescription)
                item.shortDescription = ""
            })
            return new eba.Result().setData('wmt:Products', items);
          })
          .catch((error) => {
            return { error: `Walmart API error: ${error}` }
          })
      }
  - name: 'wmt:SearchProductByName'
    signature: 'wmt:Product (optional :WithName (data :UserString)) -> data wmt:Product'
    kind: 'nodejs:8'
    code: |-
      const request = require('request-promise-native')
      const eba = require('eba')

      module.exports.main = function (params) {
        let h = new eba.Params(params)
        let nameString = h.get(":UserString")

        return request
          .get(`http://api.walmartlabs.com/v1/search?apiKey=${params.secrets.apiKey}&query=${encodeURIComponent(nameString)}`)
          .then(JSON.parse)
          .then(({items}) => {
            let item = items[0]
            if (item) {
              if (!item.shortDescription)
                item.shortDescription = ""
              return new eba.Result().setData('wmt:Product', item)
            } else {
              return { error: "I haven't found any product" }
            }
          })
          .catch((error) => {
            return { error: `Walmart API error: ${error}` }
          })
      }
  - name: 'wmt:GetProducts'
    signature: 'wmt:Products (optional wmt:Trending) -> data wmt:Products'
    kind: 'nodejs:8'
    code: |-
      const request = require('request-promise-native')
      const eba = require('eba');

      const main = ({secrets}) => {
        return request
          .get(`http://api.walmartlabs.com/v1/trends?apiKey=${secrets.apiKey}`)
          .then(JSON.parse)
          .then(({items}) => {
            items.forEach((item) => {
              if (!item.shortDescription)
                item.shortDescription = ""
            })
            return new eba.Result().setData('wmt:Products', items);
          })
          .catch((error) => {
            return { error: `Walmart API error: ${error}` }
          })
      }
      module.exports = {main}
rules:
  - name: toMinSalePrice
    signature: 'wmt:Cheap (wmt:Product) -> :MinimumBy (wmt:SalePrice, wmt:Product)'
  - name: toLowSalePrice
    signature: 'wmt:Cheap (wmt:Products) -> :LowValue (wmt:SalePrice, wmt:Products)'
  - name: toMaxSalePrice
    signature: 'wmt:Expensive (wmt:Product) -> :MaximumBy (wmt:SalePrice, wmt:Product)'
  - name: toHighSalePrice
    signature: 'wmt:Expensive (wmt:Products) -> :HighValue (wmt:SalePrice, wmt:Products)'
  - name: toTrendingProducts
    signature: 'wmt:TrendingNow -> wmt:Trending (wmt:Products)'
endpoints:
  - name: '@render'
    kind: 'nodejs:8'
    code: |-
      function renderProduct(item) {
        return {
          text: item.name,
          thumb_url: item.mediumImage,
          fields: [
            {
              title: "Price",
              value: Number(item.salePrice).toLocaleString("en-US", { style: "currency", currency: "USD"}).replace(/\.00/,""),
              short: true
            }
          ]
        }
      }

      function render(channel, node, data) {
        let { text, name } = node.data.content

        if (channel == "slack") {
          if (name == "wmt:Products") {
            let attachments = data.map(renderProduct)
            return {
              text: text,
              attachments: attachments
            }
          }
          
          if (name == "wmt:Product") {
            return {
              text: text,
              attachments: [renderProduct(data)]
            }
          }
        }
      }

      module.exports.main = function({ input }) {
        let result = render(input.channel, input.node, input.data)
        if (result) {
          return { output: result }
        } else {
          return {}
        }
      }
statics:
  - name: wmt/products.jsx
    mime: text/jsx
    text: |
      wmt_ProductsData = ({data}) => {
        return (
          <div className="wmt-products">
            { data.map((item) =>
              React.createElement(
                wmt_ProductData,
                {data:item, key:item.itemId})) }
          </div>)
      }

      wmt_ProductData = ({data}) => {
        const item = data
        return (
          <div key={item.itemId} className="wmt-product">
            <div className="wmt-product-info">
              <a href={item.addToCartUrl} target="_blank" className="wmt-product-info-image">
                <img src={item.mediumImage}/>
              </a>
              <div className="wmt-product-info-name">
                <p><strong>{item.name}</strong></p>
                <p>
                  {new Number(item.salePrice)
                    .toLocaleString("en-US", {
                        style: "currency",
                        currency: "USD"})
                    .replace(/\.00/,"")}
                  {item.msrp && item.salePrice/item.msrp < 0.99 ?
                    <span> {"\u2014 "}
                      <span className="wmt-product-discount">
                        {new Number(1-item.salePrice/item.msrp)
                          .toLocaleString("en-US", {style: "percent"})}
                        {" off MSRP"}
                      </span>
                    </span> : null}
                </p>
              </div>
            </div>
            <div className="wmt-product-info-description">
              <div dangerouslySetInnerHTML={{__html:wmt_decodeHTMLEntities(item.shortDescription
      )}}/>
            </div>
          </div>)
      }

      wmt_decodeHTMLEntities = (encoded) => {
        if (encoded) {
          var elem = document.createElement('textarea')
          elem.innerHTML = encoded.replace(/[\uFFFD]/g,' ')
          return elem.value
        }
        else return ""
      }
    frontend: true
    backend: false
  - name: wmt/product.css
    mime: text/css
    text: |-
      .wmt-product {
        margin-bottom: 20px;
      }
      .wmt-product:last-child {
        margin-bottom: 0;
      }
      .wmt-product-info {
        display: flex;
        align-items: center;
        margin-bottom: 10px;
      }
      .wmt-product-info img {
        max-width: 100px;
        margin-right: 15px;
      }
      .wmt-product-discount {
        color: red;
      }
      .wmt-product-info-description {
        display: block;
        overflow: hidden;
        line-height: 16px;
        max-height: calc(16px * 5);
        text-overflow: ellipsis;
        display: -webkit-box;
        -webkit-box-orient: vertical;
        -webkit-line-clamp: 5;
      }
    frontend: true
    backend: false
