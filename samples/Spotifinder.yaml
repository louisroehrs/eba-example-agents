version: 6
meta:
  name: Spotifinder
  icon: 'https://www.ibm.com/watson/music/noteasy/images/image-00.png'
  description: |-
    - what albums does the track "Someday" appear on?
    - show me playlists party
    - show me all categories
    - search for "acoustic pop hits"
    - make a playlist with these  -- coming soon
    - more   -- coming soon
    - show me the most popular tracks, etc.
    - show me most popular now  (i.e. three top hits in the past year)
    - show me new hits
settings:
  - name: spotAuthUrl
    value: 'https://accounts.spotify.com/api/token'
secrets:
  - name: spotClientSecret
  - name: spotClientId
concepts:
  - name: 'spot:Music'
    ontology:
      isSpellAs: music
      subClassOf: 'spot:Albums'
  - name: 'spot:ClassicalGenre'
    ontology:
      subClassOf: 'spot:MusicGenre'
      isSpellAs: classical
  - name: 'spot:MusicGenre'
  - name: 'spot:ClassicalMusic'
    ontology:
      isSpellAs: classical music
  - name: 'spot:Play'
  - name: ':IsThere'
  - name: 'spot:Unknown'
    ontology:
      subClassOf: 'spot:Tops'
  - name: 'spot:LeastPopular'
    ontology:
      subClassOf: 'spot:Tops'
  - name: 'spot:PlayThis'
  - name: 'spot:TopTenAlbums'
  - name: 'spot:TopFiveAlbums'
  - name: 'spot:TopTen'
    ontology:
      subClassOf: 'spot:Tops'
      isSpellAs: top ten
  - name: 'spot:Tops'
  - name: 'spot:TopFive'
    ontology:
      isSpellAs: top five
      subClassOf: 'spot:Tops'
  - name: 'spot:Search'
  - name: 'spot:Popular'
    ontology:
      isSpellAs: popular
  - name: 'spot:MostPopular'
    ontology:
      isSpellAs: most popular tracks
      subClassOf: 'spot:Tops'
  - name: 'spot:FirstAlbum'
    ontology:
      isSpellAs: first album
  - name: 'spot:First'
    ontology:
      subClassOf: 'spot:Timing'
      isSpellAs: first
  - name: 'spot:Timing'
  - name: 'spot:Latest'
    ontology:
      subClassOf: 'spot:Timing'
      isSpellAs: latest
  - name: ':Attribute'
  - name: 'spot:ReleaseDate'
    ontology:
      subClassOf: ':Attribute'
      isSpellAs: release date
  - name: ':SortedBy'
  - name: 'spot:LatestAlbum'
    ontology:
      isSpellAs: latest album
  - name: ':MostRecent'
  - name: 'spot:Video'
  - name: 'spot:Image'
  - name: 'spot:ArtistName'
  - name: 'spot:Asset'
    ontology:
      isSpellAs: asset
      subClassOf: ':Showable'
  - name: 'spot:Relation'
    ontology:
      isSpellAs: by
  - name: 'spot:Assets'
    ontology:
      isSpellAs: assets|*
      isListOf: 'spot:Asset'
      subClassOf: ':Showable'
  - name: 'spot:Artists'
    ontology:
      isSpellAs: artists|*
  - name: 'spot:Artist'
    ontology:
      isSpellAs: artist
      subClassOf: 'spot:AssetType'
  - name: 'spot:Tracks'
    ontology:
      isSpellAs: tracks|*
  - name: 'spot:AssetType'
    ontology:
      isSpellAs: music
  - name: 'spot:SearchResults'
    ontology:
      isSpellAs: search results
      subClassOf: ':Showable'
  - name: ':UserText'
  - name: ':FreeText'
  - name: ':Relation'
    ontology:
      isSpellAs: for
      subClassOf: 'spot:Relation'
  - name: 'spot:Track'
    ontology:
      isSpellAs: track
      subClassOf: 'spot:AssetType'
  - name: 'spot:Album'
    ontology:
      subClassOf:
        - 'spot:AssetType'
        - ':Showable'
      isSpellAs: album
    attributes:
      'spot:ReleaseDate': release_date
      'spot:Artist': 'artists[0].name'
  - name: 'spot:Albums'
    ontology:
      isSpellAs: albums|*
      isListOf: 'spot:Album'
      subClassOf: ':Showable'
  - name: ':WithName'
  - name: ':Filter'
    ontology:
      subClassOf: 'spot:Relation'
  - name: 'spot:CategoryId'
  - name: 'spot:Category'
    ontology:
      isSpellAs: ' category'
    attributes:
      'spot:CategoryId': id
      'spot:CategoryName': name
  - name: 'spot:CategoryName'
    ontology:
      subClassOf: ':UserString'
  - name: 'spot:Playlists'
    ontology:
      isListOf: 'spot:Playlist'
      subClassOf: ':Showable'
      isSpellAs: playlists|*
  - name: 'spot:Country'
    ontology:
      isSpellAs: country
  - name: 'spot:Playlist'
    ontology:
      isSpellAs: playlist
      subClassOf: ':Showable'
    attributes:
      'spot:PlaylistName': name
  - name: 'spot:PlaylistName'
  - name: ':Showable'
  - name: ':All'
    ontology:
      isSpellAs: all
  - name: 'spot:Categories'
    ontology:
      isListOf: 'spot:Category'
      isSpellAs: categories|*
      subClassOf: ':Showable'
  - name: ':UserString'
  - name: 'spot:SearchQuery'
    ontology:
      subClassOf: ':UserString'
  - name: ':ActionShow'
patterns: "<!--\n\tEnter your NL patterns in this markdown panel. \n\tA pattern consists of natural language text annotated with concepts tags. \n\tFor example,\n\t 'tell me a [joke](demo:Joke)' annotates the demo:Joke concept appropriately\n\t 'show me the [weather](demo:Weather)' annotates the demo:Weather concept appropriately. \n\tWe even support regular expression annotations.\n\t For example, '[`REGEX [0-9]{5}`](demo:ZIPCode)' provides a zip code annotation.\n-->\n<!--\n\tEnter your NL patterns in this markdown panel. \n\tA pattern consists of natural language text annotated with concepts tags. \n\tFor example,\n\t 'tell me a [joke](demo:Joke)' annotates the demo:Joke concept appropriately\n\t 'show me the [weather](demo:Weather)' annotates the demo:Weather concept appropriately. \n\tWe even support regular expression annotations.\n\t For example, '[`REGEX [0-9]{5}`](demo:ZIPCode)' provides a zip code annotation.\n-->\n- what [albums](spot:Albums) does the track “Someday” appear on?\n- show me [playlists](spot:Playlists) for category Jazz\n- get [playlists](spot:Playlists) for \"Party\"\n- show me [categories](spot:Categories)\n- show me [albums](spot:Albums) by Madonna\n- show me [abums](spot:Albums) by joe\n- show me [music](spot:Music) [composed by](spot:Relation) Beethoven\n- [find me](spot:SearchResults) (spot:SearchQuery)\n- [dig up](spot:SearchResults) (spot:SearchQuery)\n- find [tracks](spot:Tracks), [artists](spot:Artists), [albums](spot:Albums)  called \"something\"\n- show me [tracks](spot:Tracks), [artists](spot:Artists), [albums](spot:Albums)  for something\n- show me [tracks](spot:Tracks) for Madonna\n- show me track for this album\n- [search](spot:SearchResults) the most popular \"rock\"\n- [search for](:ActionShow) the most popular \"rock\"\n- show me the [track](spot:Track), the [artist](spot:Artist), and the [album](spot:Album) \n- [by](spot:Relation)\n- [for](spot:Relation)\n- [most popular](spot:MostPopular) tracks\n- [least popular](spot:LeastPopular)\n- [unknown](spot:Unknown)\n- show me the [latest album](spot:LatestAlbum) by Madonna\n- show me the [first album](spot:FirstAlbum) by REM\n- show me the [earliest album](spot:FirstAlbum) by REM\n- show me the [top 5 albums](spot:TopFiveAlbums)  by Madonna\n- show me the [top 10 albums](spot:TopTenAlbums)  by Madonna\n- show me the [top ten albums](spot:TopTenAlbums)  by Madonna\n- show me the [top five albums](spot:TopFiveAlbums)  by Madonna\n- [i want some](spot:SearchResults) music for programming agents\n- [play it](spot:PlayThis)\n- [play](spot:Play) some classical music\n- who made \"Song\"\n- add this song to playlist \"Freddy\"\n- add this track to playlist \"Kruger\"\n\n\n"
actions:
  - name: 'spot:TrackForAlbum'
    signature: 'spot:Tracks (spot:Relation (context spot:Albums)) -> data spot:Tracks'
    kind: 'nodejs:10'
    code: |+
      const eba = require("eba")
      const request = require("request-promise-native")
         
      module.exports.main = async (params) => {
        let p = new eba.Params(params)
        let searchquery = p.get(":FreeText")
        let timing = p.getName("timing")


      // let country = p.get("spot:Country")
        
        let options = {
            uri:  `https://api.spotify.com/v1/search?q=${encodeURIComponent(searchquery)}&type=album`,
            headers: {
              "Authorization": "Bearer " + params.storage["token"]
            },
            json: true 
          }
          
        let progress = "Status: Reached query"
        progress += "Timing " + timing
        progress += " Access Token: " + options.headers.Authorization
        progress += " Search:" + JSON.stringify(searchquery)
        progress += "Path: " + options.uri
          //  return { error: `SPOT:  Progress: ${progress}` }

        return request(options)
          .then((result) => {
            let items = []
           // items.push({id:"spot:GetAlbumsByArtist", "name": `searching for "${searchquery}" `,"type":"all"})
            if (result.albums) {
              
                (timing == null) &&
                  items.push(...result.albums.items.filter(item => item.artists[0].name.toLowerCase() == searchquery.toLowerCase() ));
                (timing == "spot:Latest") && items.push(result.albums.items.filter(item => item.artists[0].name.toLowerCase() == searchquery.toLowerCase() ).sort((itema,itemb) => 
                     new Date(itemb.release_date) - new Date(itema.release_date))[0]);
                 (timing == "spot:First") && items.push(result.albums.items.filter(item => item.artists[0].name.toLowerCase() == searchquery.toLowerCase() ).sort((itema,itemb) => 
                     new Date(itema.release_date) - new Date(itemb.release_date))[0]);
            }
        //   items.push({id:"spot:GetAlbumsByArtist", "name": `searching for "${searchquery}" `,"type":"all","timing":timing})
            if (items.length > 0) {
              return new eba.Result().setData("spot:Albums", items)
            } else return {error:`SPOT: No results found for "${searchquery}"` } 
          }
        )
        .catch(function (error) {
          //return { error: `No search results were found for "${p.get(":UserString")}"` }
          return { error: `SPOT: API error: ${error}  Progress: ${progress}` }
        })
      };



    notes: 'TODO: Fix the code.'
  - name: 'spot:GetAnything'
    signature: >-
      type subClassOf spot:AssetType, relational subClassOf spot:Relation =>
      spot:Assets (optional :All, type, optional relational (data :FreeText)) ->
      data spot:Assets
    kind: 'nodejs:10'
    code: |+
      const eba = require("eba")
      const request = require("request-promise-native")
         
      module.exports.main = async (params) => {
        let p = new eba.Params(params)
        let searchquery = p.get(":FreeText")
        let type = p.getName('type')

      // let country = p.get("spot:Country")
        
        let options = {
            uri:  `https://api.spotify.com/v1/search?q=${encodeURIComponent(searchquery)}&type=${type}`,
            headers: {
              "Authorization": "Bearer " + params.storage["token"]
            },
            json: true 
          }
          
        let progress = "Status: Reached query"
        progress += " Access Token: " + options.headers.Authorization
        progress += " Search:" + JSON.stringify(searchquery)
        progress += "Path: " + options.uri
        
        return request(options)
          .then((result) => {
            let items = []
            items.push({id:"spot:GetAnything", "name": `searching for "${searchquery}" `,"type":type})
            if (result[type]) {
              items.push(...result[type].items)
            }
           
            if (items.length > 0) {
              return new eba.Result().setData("spot:Assets", items)
            }

            else return {error:`SPOT: GetAnything No results found for "${searchquery}"` } 
          }
        )
        .catch(function (error) {
          //return { error: `No search results were found for "${p.get(":UserString")}"` }
          return { error: `SPOT: GetAnything: API error: ${error}  Progress: ${progress}` }
        })
      };



    notes: in progress. just trying to get the damn thing to trigger
    active: true
  - name: 'spot:GetAlbumsByArtist'
    signature: >-
      timing subClassOf spot:Timing, tops subClassOf spot:Tops, genre subClassOf
      spot:MusicGenre => spot:Albums (optional spot:Relation (data :FreeText,
      optional timing, optional tops, optional genre)) -> data spot:Albums
    kind: 'nodejs:10'
    code: |+
      const eba = require("eba")
      const request = require("request-promise-native")
         
      module.exports.main = async (params) => {
        let p = new eba.Params(params)
        let searchquery = p.get(":FreeText")
        let timing = p.getName("timing")
        let tops = p.getName("tops")
        let genre = p.getName("genre")

        const artistfilter = (item,searchquery) => {
          return item => item.artists[0].name.toLowerCase().contains(searchquery.toLowerCase())
        }
        
        if ( genre != null) {
          genre = genre.substring(genre.indexOf(":")+1,genre.indexOf("Genre")).toLowerCase()

          if ( searchquery != null) {
            searchquery += " " + genre
          } else {
            searchquery = genre
          }
        }
      // let country = p.get("spot:Country")
        
        let options = {
            uri:  `https://api.spotify.com/v1/search?q=${encodeURIComponent(searchquery)}&type=album`,
            headers: {
              "Authorization": "Bearer " + params.storage["token"]
            },
            json: true 
          }
          
        let progress = "Status: Reached query"
        progress += "Timing " + timing
        progress += "Tops " + tops

        progress += " Access Token: " + options.headers.Authorization
        progress += " Search:" + JSON.stringify(searchquery)
        progress += "Path: " + options.uri
          //  return { error: `SPOT:  Progress: ${progress}` }

        return request(options)
          .then((result) => {
            let items = []
           // items.push({id:"spot:GetAlbumsByArtist", "name": `searching for "${searchquery}" `,"type":"all"})
            if (result.albums) {
              
                (timing == null) &&
                  items.push(...result.albums.items.filter(item => artistfilter(item,searchquery) ));
                (timing == "spot:Latest") && items.push(result.albums.items.filter(item => artistfilter(item,searchquery)).sort((itema,itemb) => 
                     new Date(itemb.release_date) - new Date(itema.release_date))[0]);
                (timing == "spot:First") && items.push(result.albums.items.filter(item => artistfilter(item,searchquery) ).sort((itema,itemb) => 
                     new Date(itema.release_date) - new Date(itemb.release_date))[0]);
                     
                (tops == "spot:TopFive") && items.push(...result.albums.items.filter(item => artistfilter(item,searchquery)).sort((itema,itemb) => 
                     itemb.popularity - itema.popularity).slice(0,4));
                (tops == "spot:TopTen") && items.push(...result.albums.items.filter(item => artistfilter(item,searchquery)).sort((itema,itemb) => 
                     itemb.popularity - itema.popularity).slice(0,9));
            }
        //   items.push({id:"spot:GetAlbumsByArtist", "name": `searching for "${searchquery}" `,"type":"all","timing":timing})
            if (items.length > 0) {
              return new eba.Result().setData("spot:Albums", items)
             /* } else if (items.length == 1) {
              return new eba.Result().setData("spot:Album", items[0]) */
            } else return {error:`SPOT: No results found for "${searchquery}"` } 
          }
        )
        .catch(function (error) {
          //return { error: `No search results were found for "${p.get(":UserString")}"` }
          return { error: `SPOT: API error: ${error}  Progress: ${progress}` }
        })
      };


    notes: |-
      works
      show me albums by "someone"
      show me latest album by "someone"
      show me the first album by "someone"
    active: true
  - name: 'spot:GetPlaylists'
    signature: 'spot:Playlists (:Relation (data :FreeText)) -> data spot:Playlists'
    kind: 'nodejs:10'
    code: |-
      const eba = require("eba")
      const request = require("request-promise-native")
            
      async function main(params) {
        let p = new eba.Params(params)
        let category = p.get(":FreeText").toLowerCase()
      // let country = p.get("spot:Country")
        
        let pathListview = `https://api.spotify.com/v1/browse/categories/${category}/playlists`
              
        let progress = "Status: Reached query"
        
        let access_token= params.storage["token"]
        progress += " Access Token: " + access_token
        progress += " Category:" + JSON.stringify(category)
        progress += "Path: " + pathListview
        return request
          .get({
            uri:  pathListview,
            headers: {
              "Authorization": "Bearer " + access_token
            }
          })
          .then(JSON.parse)
          .then(function(results) {
            return new eba.Result().setData("spot:Playlists", results.playlists.items)
          }
        )
        .catch(function (error) {
          return { error: `No playlists were found for "${p.get(":UserString")}"` }
          //return { error: `API error: ${error}  Progress: ${progress}` }
        })
      }
      module.exports = {main}
    notes: works
    active: true
  - name: 'spot:GetCategories'
    signature: 'spot:Categories (optional :All) -> data spot:Categories'
    kind: 'nodejs:10'
    code: |-
      const eba = require("eba")
      const request = require("request-promise-native")
            
      async function main(params) {
              
        let pathListview = "https://api.spotify.com/v1/browse/categories"
              
        let progress = "Status: Reached query"
        
        let access_token= params.storage["token"]
        progress += " Access Token" + access_token
        return request
          .get({
            uri:  pathListview,
            headers: {
              "Authorization": "Bearer " + access_token
            }
          })
          .then(JSON.parse)
          .then(function(results) {
            return new eba.Result().setData("spot:Categories", results.categories.items)
          }
        )
        .catch(function (error) {
          return { error: `API error: ${error}  Progress: ${progress}` }
        })
      }
      module.exports = {main}
    notes: works
    active: true
  - name: 'spot:SearchAction'
    signature: >-
      tops subClassOf spot:Tops => spot:SearchResults (data :UserString,
      optional tops) -> data spot:SearchResults
    kind: 'nodejs:10'
    code: >+
      const eba = require("eba")

      const request = require("request-promise-native")
        

      module.exports.main = async (params) => {
        let p = new eba.Params(params)
        let searchquery = p.get(":UserString") || p.get(":FreeText")
        let popular = p.getName("tops")


      // let country = p.get("spot:Country")
        
        let types = "";
        if (["spot:MostPopular","spot:LeastPopular","spot:Unknown"] .includes(popular) ) 
           types = "track"
        else 
           types = "artist,album,track"
           
        let options = {
            uri:  `https://api.spotify.com/v1/search?q=${encodeURIComponent(searchquery)}&type=${types}`,
            headers: {
              "Authorization": "Bearer " + params.storage["token"]
            },
            json: true 
          }
          
        let progress = "Status: Reached query"
        progress += " Access Token: " + options.headers.Authorization
        progress += " Search:" + JSON.stringify(searchquery)
        progress += " Popular:"+  popular
        progress += "Path: " + options.uri
        
        return request(options)
          .then((result) => {
            let items = []
      //      items.push({id:"searching for", "name": `searching for
      "${searchquery}" `,"type":"all"})
            if (result.artists) {
              items.push(...result.artists.items)
            }
            if (result.albums) {
              items.push(...result.albums.items)
            }
            
            if (result.tracks) {
              if (popular == "spot:MostPopular") {
                items.push(...result.tracks.items.sort((itema,itemb) => 
                  itemb.popularity-itema.popularity).slice(0,9));
              }  
              else if (["spot:Unknown","spot:LeastPopular"].includes(popular)) {
                items.push(...result.tracks.items.sort((itema,itemb) => 
                  itema.popularity-itemb.popularity).slice(0,9));
              }
              else {
                items.push(...result.tracks.items)
              }
              //progress += " Search:" + JSON.stringify(items)
              //return { error: `SPOT Debug:  Progress: ${progress}` }

            }
            if (items.length > 0) {
              return new eba.Result().setData("spot:SearchResults", items)
            } else return {error:`SPOT: No results found for "${searchquery}"` } 
          }
        )
        .catch(function (error) {
          //return { error: `No search results were found for "${p.get(":UserString")}"` }
          return { error: `SPOT Search: API error: ${error}  Progress: ${progress}` }
        })
      }

    notes: show me "search"
    active: true
rules:
  - name: ''
    signature: 'spot:Music -> spot:Albums'
  - name: ''
    signature: 'spot:ClassicalMusic -> spot:Albums (spot:ClassicalGenre)'
  - name: ''
    signature: 'spot:TopTenAlbums -> spot:Albums (spot:TopTen)'
  - name: ''
    signature: 'spot:TopFiveAlbums -> spot:Albums (spot:TopFive)'
  - name: ''
    signature: 'spot:MostPopular -> spot:SearchResults (spot:Popular)'
  - name: ''
    signature: 'spot:FirstAlbum -> spot:Albums (spot:First)'
  - name: ''
    signature: 'spot:LatestAlbum -> spot:Albums (spot:Latest)'
    active: true
  - name: 'spot:ArtistAssets'
    signature: 'spot:Artists -> spot:Assets (spot:Artist)'
    active: false
  - name: 'spot:AlbumAssets'
    signature: 'spot:Albums -> spot:Assets (spot:Album)'
    active: false
  - name: 'spot:TrackAssets'
    signature: 'spot:Tracks -> spot:Assets (spot:Track)'
    active: false
endpoints:
  - name: '@start'
    kind: 'nodejs:10'
    code: |
      const eba = require('eba');
      const request = require("request-promise-native")

      async function main(params) {
        var options = {
          uri: params.settings["spotAuthUrl"],
          form: "grant_type=client_credentials",
          headers: {
            "Authorization": "Basic " + Buffer.from(`${params.secrets.spotClientId}:${params.secrets.spotClientSecret}`).toString('base64')
          },
          json: true
        }
              
        let progress = " Status: Preparing request to " + params.settings["spotAuthUrl"]
        progress += Buffer.from(`${params.secrets.spotClientId}:${params.secrets.spotClientSecret}`).toString('base64') + ` ${params.secrets.spotClientId}:${params.secrets.spotClientSecret}` 
                
        return request.post(options)
          .then(function(body) {
            var access_token = body.access_token
            progress += " Access Token: " + access_token
            return new eba.Result().store('token', access_token);
          }
        ).catch(function (error) {
          return { error: `API error: ${error}  Progress: ${progress}` }
        })
      };

      module.exports = {main}
statics:
  - name: spot/albums.jsx
    mime: text/jsx
    text: |
      spot_AlbumsData = ({data}) => {
        return (
          <div className="wmt-products">
            { 
                data.map((item) =>
                  React.createElement(
                    spot_AlbumData,
                    {data:item}))
              }
          </div>)
      }

      spot_AlbumsContent = ({data}) => {
        return (
          <div className="wmt-products">
            { 
                data.map((item) =>
                  React.createElement(
                    spot_AlbumContent,
                    {data:item}))
              }
          </div>)
      }

      // the datasets seem to be located at <host>/resource/<datasetid>.json
      spot_AlbumContent = ({data}) => {
        const item = data
        console.log(JSON.stringify(item));
        return (
          <div key={item.id} className="wmt-product" style={{float:'left'}} onClick={() => { window.open(item.uri,"_self"); return null;} }>
            <div className="wmt-product-info">
              <div className="wmt-product-info-name">
                <p><strong>{item.name}</strong> 
                <br/>{item.total_tracks} Tracks
                <br/>{item.release_date}
             
                </p>
            
                <img src={item.images[0].url}/>
              </div> 
            </div>
          </div>)
      }
      // the datasets seem to be located at <host>/resource/<datasetid>.json
      spot_AlbumData = ({data}) => {
        const item = data
        console.log(JSON.stringify(item));
        return (
          <div key={item.id} className="wmt-product" onClick={() => { window.open(item.uri,"_self"); return null;} }>
            <div className="wmt-product-info">
              <div className="wmt-product-info-name">
                <p><strong>{item.name}</strong> 
                <br/>{item.total_tracks} Tracks
                <br/>{item.release_date}
                 </p> 
                <img src={item.images[0].url}/>
              </div> 
            </div>
          </div>)
      }

      spot_link = ({linky}) => {
        const link = linky
        return (<a href={'"'+link+'"'} target='_blank'>{link}</a>)
      }

      spot_decodeHTMLEntities = (encoded) => {
        if (encoded) {
          var elem = document.createElement('textarea')
          elem.innerHTML = encoded.replace(/[\uFFFD]/g,' ')
          return elem.value
        }
        else return ""
      }
    frontend: true
  - name: spot/searchresults.jsx
    mime: text/jsx
    text: >-
      spotSearchDataDisplayTypes = (type) => {
        return {"album":spot_AlbumData,
                "track":spot_TrackData,
                "artist":spot_ArtistData
        }[type]
      }


      spot_SearchResultsData = ({data}) => {
        return (
          <div className="wmt-products">
           { data.map((item) => 
                 React.createElement(
                  spotSearchDataDisplayTypes(item.type),
                  {data:item}) 
              ) 
            }
          </div>
          )
      }


      // spotSearchDataDisplayTypes(item.type),

      spot_SearchResultData = ({data}) => {
        const item = data;
        console.log("dd"+JSON.stringify(item));
        return (
          <div key={item.id} className="wmt-product" onClick={() => { window.open(item.uri,"_self"); return null;} } >
            <div className="wmt-product-info">
              <div className="wmt-product-info-name">
                <p><strong>{item.name}</strong></p> 
                <p>{item.type}</p>
              </div> 
            </div>
          </div>)
      }


      spot_thing_click = ({event}) => {  this.setState({ selectedItem:
      event.currentTarget.dataset.id });
      window.open(event.currentTarget.dataset.id)
          //where 'id' =  whatever suffix you give the data-* li attribute
      }



      spot_ArtistData = ({data}) => {
        const item = data
        console.log(JSON.stringify(item));
        return (
          <div key={item.id} className="wmt-product"  onClick={() => { window.open(item.uri,"_self"); return null;} }>
            <div className="wmt-product-info">
              <div className="wmt-product-info-name">
                <p><strong>{item.name}</strong></p> 
                <p>{item.type}</p>
              </div> 
            </div>
          </div>)
      }




      spot_TrackData = ({data}) => {
        const item = data
        console.log(JSON.stringify(item));
        return (
          <div key={item.id} className="wmt-product" onClick={() => { window.open(item.uri,"_self"); return null;} }>
            <div className="wmt-product-info">
              <div className="wmt-product-info-name" data-id={item.external_urls.spotify}>
                <p><strong>{item.name}</strong> 
                  <br/>by {item.artists[0].name}
                  <br/>Popularity {item.popularity}
                  </p>
                <img src={item.album.images[0].url}/>
              </div> 
            </div>
          </div>)
      }

      /*

      spot_link = ({linky}) => {
        const link = linky
        return (<div onClick={window.open(link)}>{link}</a>)
      }

      */

      /*{
                   React.createElement(
                  spot_link,{linky:item.external_urls.spotify})}
                  */

      spot_decodeHTMLEntities = (encoded) => {
        if (encoded) {
          var elem = document.createElement('textarea')
          elem.innerHTML = encoded.replace(/[\uFFFD]/g,' ')
          return elem.value
        }
        else return ""
      }
    frontend: true
  - name: spot/playlists.jsx
    mime: text/jsx
    text: |
      spot_PlaylistsData = ({data}) => {
        return (
          <div className="wmt-products">
            { 
                data.map((item) =>
                  React.createElement(
                    spot_PlaylistData,
                    {data:item}))
              }
          </div>)
      }

      spot_PlaylistsContent = ({data}) => {
        return (
          <div className="wmt-products">
            { 
                data.map((item) =>
                  React.createElement(
                    spot_PlaylistContent,
                    {data:item}))
              }
          </div>)
      }

      // the datasets seem to be located at <host>/resource/<datasetid>.json
      spot_PlaylistContent = ({data}) => {
        const item = data
        console.log(JSON.stringify(item));
        return (
          <div key={item.id} className="wmt-product" style={{float:'left'}}>
            <div className="wmt-product-info">
              <div className="wmt-product-info-name">
                <p><strong>{item.name}</strong> {item.tracks.total}</p> 
                <img src={item.images[0].url}/>
              </div> 
            </div>
          </div>)
      }
      // the datasets seem to be located at <host>/resource/<datasetid>.json
      spot_PlaylistData = ({data}) => {
        const item = data
        console.log(JSON.stringify(item));
        return (
          <div key={item.id} className="wmt-product">
            <div className="wmt-product-info">
              <div className="wmt-product-info-name">
                <p><strong>{item.name}</strong> {item.tracks.total}</p> 
                <img src={item.images[0].url}/>
              </div> 
            </div>
          </div>)
      }

      spot_link = ({linky}) => {
        const link = linky
        return (<a href={'"'+link+'"'} target='_blank'>{link}</a>)
      }

      spot_decodeHTMLEntities = (encoded) => {
        if (encoded) {
          var elem = document.createElement('textarea')
          elem.innerHTML = encoded.replace(/[\uFFFD]/g,' ')
          return elem.value
        }
        else return ""
      }
    frontend: true
  - name: spot/category.css
    mime: text/css
    text: |-
      .wmt-product {
        margin-bottom: 20px;
      }
      .wmt-product:last-child {
        margin-bottom: 0;
      }
      .wmt-product-info {
        display: flex;
        align-items: center;
        margin-bottom: 10px;
      }
      .wmt-product-info img {
        max-width: 100px;
        margin-right: 15px;
      }
      .wmt-product-discount {
        color: red;
      }
      .wmt-product-info-description {
        display: block;
        overflow: hidden;
        line-height: 16px;
        max-height: calc(16px * 5);
        text-overflow: ellipsis;
        display: -webkit-box;
        -webkit-box-orient: vertical;
        -webkit-line-clamp: 5;
      }
    frontend: true
  - name: spot/categories.jsx
    mime: text/jsx
    text: |-
      spot_CategoriesData = ({data}) => {
        return (
          <div className="wmt-products">
            { data.map((item) =>
              React.createElement(
                spot_CategoryData,
                {data:item})) }
          </div>)
      }
      // the datasets seem to be located at <host>/resource/<datasetid>.json
      spot_CategoryData = ({data}) => {
        const item = data
        console.log(JSON.stringify(item));
        return (
          <div key={item.id} className="wmt-product"  onClick={function() {bridge.trigger("ask","show me playlists for category \"" + item.name+"\"")}} >
            <div className="wmt-product-info">
              <div className="wmt-product-info-name">
                <p><strong>{item.name}</strong></p> 
                <p>{true||React.createElement(spot_link,{linky:item.href})}</p>
                <img src={item.icons[0].url}/>

              </div> 
            </div>
          </div>)
      }


      spot_CategoriesContent = ({data}) => {
        return (
          <div className="wmt-products">
            { data.map((item) =>
              React.createElement(
                spot_CategoryContent,
                {data:item})) }
          </div>)
      }
      // the datasets seem to be located at <host>/resource/<datasetid>.json
      spot_CategoryContent = ({data}) => {
        const item = data
        console.log(JSON.stringify(item));
        return (
          <div key={item.id} className="wmt-product"  onClick={function() {bridge.trigger("ask","show me playlists for category \"" + item.name+"\"")}} style={{float:'left'}}>
            <div className="wmt-product-info">
              <div className="wmt-product-info-name">
                <p><strong>{item.name}</strong></p> 
                <p>{true||React.createElement(spot_link,{linky:item.href})}</p>
                <img src={item.icons[0].url}/>

              </div> 
            </div>
          </div>)
      }
      spot_cat_click = (name)=> {
         return 'bridge.trigger("ask","show me playlists for "'+name+'")';
      }
         
      spot_link = ({linky}) => {
        const link = linky
        return (<a href={'"'+link+'"'} target='_blank'>{link}</a>)
      }

      spot_decodeHTMLEntities = (encoded) => {
        if (encoded) {
          var elem = document.createElement('textarea')
          elem.innerHTML = encoded.replace(/[\uFFFD]/g,' ')
          return elem.value
        }
        else return ""
      }
    frontend: true
